package mapreduce

import (
	// "fmt"
	"hash/fnv"
	"io/ioutil"
	"os"
)

func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(filename string, contents string) []KeyValue,
) {
	//
	// doMap manages one map task: it should read one of the input files
	// (inFile), call the user-defined map function (mapF) for that file's
	// contents, and partition mapF's output into nReduce intermediate files.
	//

	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see
	// below) on each key, mod nReduce, to pick r for a key/value pair.
	//

	// fmt.Println("Hello World", reduceResults[1],"\n\n\n\n\n\n\n\n\n")
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	// Your code here (Part I).
	//
	fileNames := make([]string, nReduce)
	for i := 0; i < nReduce; i++ {
		fileNames[i] = reduceName(jobName, mapTask, i)
	}
	// fmt.Println(inFile,"\n\n\n\n")
	// fmt.Println("file name is ",fileNames,"\n\n")
	// fmt.Println(r)
	byteContent, _ := ioutil.ReadFile(inFile)
	fileContent := string(byteContent)
	// stringArray := strings.Split(fileContent,"\n")
	// fmt.Println(stringArray[0],"\n\n\n\n\n\n")
	mapResult := mapF(inFile, fileContent)
	// fmt.Println(mapResult[0])
	// var reduceResults []string = make([]string, nReduce)
	/*for _, element := range mapResult{
		currResult := ihash(element.Key)%nReduce
		// fmt.Println(len(reduceResults[currResult]))
		reduceResults[currResult]+=element.Key
		reduceResults[currResult]+=" "
		reduceResults[currResult]+=element.Value
		reduceResults[currResult]+="\n"
	}
	for i :=0; i<nReduce; i++{
		fmt.Println("The length is", len(reduceResults[0]))
		name := reduceName(jobName, mapTask, i)
		f, _ := os.Create(name)
		ioutil.WriteFile(name,[]byte(reduceResults[i]),0777)
		defer f.Close()
	}*/
	/*
				f, err := os.OpenFile(filename, os.O_APPEND|os.O_WRONLY, 0600)
				if err != nil {
				    panic(err)
				}

				defer f.Close()

				if _, err = f.WriteString(text); err != nil {
				    panic(err)
		}
	*/
	for i := 0; i < nReduce; i++ {
		name := reduceName(jobName, mapTask, i)
		f, _ := os.Create(name)
		f.Close()
	}
	// fmt.Println(len(mapResult))
	for _, element := range mapResult {
		currResult := ihash(element.Key) % nReduce
		// fmt.Println(len(reduceResults[currResult]))
		name := reduceName(jobName, mapTask, currResult)
		f, err := os.OpenFile(name, os.O_APPEND|os.O_WRONLY, 0644)
		// if err != nil {
		// 		panic(err)
		// }
		stringR := ""
		stringR += element.Key
		stringR += ","
		stringR += element.Value
		stringR += "\n"
		if _, err = f.WriteString(stringR); err != nil {
			panic(err)
		}
		f.Close()
	}
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
